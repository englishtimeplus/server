# docker-compose.yml
version: '3.8'

services:
  # Redis 클러스터 설정 (6개 노드 - 3 마스터, 3 슬레이브)
  redis-node-1:
    image: redis:7-alpine
    container_name: redis-node-1
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "7001:6379"
      - "17001:16379"
    volumes:
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
      - redis-node-1-data:/data
    environment:
      - REDIS_NODE_ID=1
    networks:
      - friend-status-network

  redis-node-2:
    image: redis:7-alpine
    container_name: redis-node-2
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "7002:6379"
      - "17002:16379"
    volumes:
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
      - redis-node-2-data:/data
    environment:
      - REDIS_NODE_ID=2
    networks:
      - friend-status-network

  redis-node-3:
    image: redis:7-alpine
    container_name: redis-node-3
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "7003:6379"
      - "17003:16379"
    volumes:
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
      - redis-node-3-data:/data
    environment:
      - REDIS_NODE_ID=3
    networks:
      - friend-status-network

  redis-node-4:
    image: redis:7-alpine
    container_name: redis-node-4
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "7004:6379"
      - "17004:16379"
    volumes:
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
      - redis-node-4-data:/data
    environment:
      - REDIS_NODE_ID=4
    networks:
      - friend-status-network

  redis-node-5:
    image: redis:7-alpine
    container_name: redis-node-5
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "7005:6379"
      - "17005:16379"
    volumes:
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
      - redis-node-5-data:/data
    environment:
      - REDIS_NODE_ID=5
    networks:
      - friend-status-network

  redis-node-6:
    image: redis:7-alpine
    container_name: redis-node-6
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "7006:6379"
      - "17006:16379"
    volumes:
      - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf
      - redis-node-6-data:/data
    environment:
      - REDIS_NODE_ID=6
    networks:
      - friend-status-network

  # Redis Cluster 초기화 컨테이너
  redis-cluster-init:
    image: redis:7-alpine
    container_name: redis-cluster-init
    command: >
      sh -c "
        sleep 10 &&
        redis-cli --cluster create 
        redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 
        redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 
        --cluster-replicas 1 --cluster-yes
      "
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    networks:
      - friend-status-network

  # WebSocket 서버 클러스터
  websocket-server-1:
    build: .
    container_name: websocket-server-1
    ports:
      - "3001:3000"
    environment:
      - SERVER_ID=websocket-server-1
      - REDIS_CLUSTER_NODES=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379,redis-node-6:6379
      - PORT=3000
    depends_on:
      - redis-cluster-init
    networks:
      - friend-status-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  websocket-server-2:
    build: .
    container_name: websocket-server-2
    ports:
      - "3002:3000"
    environment:
      - SERVER_ID=websocket-server-2
      - REDIS_CLUSTER_NODES=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379,redis-node-6:6379
      - PORT=3000
    depends_on:
      - redis-cluster-init
    networks:
      - friend-status-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  websocket-server-3:
    build: .
    container_name: websocket-server-3
    ports:
      - "3003:3000"
    environment:
      - SERVER_ID=websocket-server-3
      - REDIS_CLUSTER_NODES=redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379,redis-node-6:6379
      - PORT=3000
    depends_on:
      - redis-cluster-init
    networks:
      - friend-status-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx 로드 밸런서
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - websocket-server-1
      - websocket-server-2
      - websocket-server-3
    networks:
      - friend-status-network

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=friend_system
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - friend-status-network

  # Redis 모니터링 (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis-insight-data:/db
    networks:
      - friend-status-network

  # 모니터링 시스템 (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - friend-status-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - friend-status-network

networks:
  friend-status-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
  redis-node-4-data:
  redis-node-5-data:
  redis-node-6-data:
  postgres-data:
  redis-insight-data:
  prometheus-data:
  grafana-data:

---

# redis-cluster.conf
# Redis 클러스터 설정
port 6379
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
cluster-announce-ip 127.0.0.1
cluster-announce-port 6379
cluster-announce-bus-port 16379

# 메모리 최적화
maxmemory 1gb
maxmemory-policy allkeys-lru
maxmemory-samples 5

# 성능 최적화
tcp-keepalive 300
timeout 0
tcp-backlog 511
databases 1

# 영속성 설정
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb

# 네트워크 최적화
bind 0.0.0.0
protected-mode no

# 로깅
loglevel notice
logfile /var/log/redis/redis-server.log

---

# nginx.conf
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    upstream websocket_backend {
        least_conn;
        server websocket-server-1:3000 weight=1 max_fails=3 fail_timeout=30s;
        server websocket-server-2:3000 weight=1 max_fails=3 fail_timeout=30s;
        server websocket-server-3:3000 weight=1 max_fails=3 fail_timeout=30s;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 80;
        server_name localhost;

        # WebSocket 프록시 설정
        location / {
            proxy_pass http://websocket_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 타임아웃 설정
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 60s;
            
            # 버퍼 설정
            proxy_buffering off;
            proxy_cache off;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # 로깅 설정
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    client_max_body_size 1m;
}

---

# Dockerfile
FROM node:18-alpine

WORKDIR /app

# 의존성 파일 복사
COPY package*.json ./

# 의존성 설치
RUN npm ci --only=production && npm cache clean --force

# 애플리케이션 코드 복사
COPY . .

# 사용자 생성 (보안)
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# 파일 권한 설정
RUN chown -R nodejs:nodejs /app
USER nodejs

# 포트 노출
EXPOSE 3000

# 헬스체크 추가
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node healthcheck.js || exit 1

# 애플리케이션 시작
CMD ["node", "server.js"]

---

# package.json
{
  "name": "friend-online-status-system",
  "version": "1.0.0",
  "description": "High-performance friend online status system with uWebSocket and Redis",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "cluster": "node cluster.js"
  },
  "dependencies": {
    "uws": "^20.36.0",
    "ioredis": "^5.3.2",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3",
    "pg": "^8.11.3",
    "prom-client": "^15.0.0",
    "winston": "^3.10.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

---

# prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'websocket-servers'
    static_configs:
      - targets: ['websocket-server-1:3000', 'websocket-server-2:3000', 'websocket-server-3:3000']
    metrics_path: '/metrics'
    scrape_interval: 5s

  - job_name: 'redis'
    static_configs:
      - targets: ['redis-node-1:6379', 'redis-node-2:6379', 'redis-node-3:6379']

  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']

---

# init.sql - PostgreSQL 초기화 스크립트
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 사용자 테이블
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 친구 관계 테이블
CREATE TABLE friendships (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    friend_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    status VARCHAR(20) DEFAULT 'pending', -- pending, accepted, blocked
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, friend_id)
);

-- 인덱스 생성 (성능 최적화)
CREATE INDEX idx_friendships_user_id ON friendships(user_id);
CREATE INDEX idx_friendships_friend_id ON friendships(friend_id);
CREATE INDEX idx_friendships_status ON friendships(status);
CREATE INDEX idx_friendships_user_status ON friendships(user_id, status);

-- 친구 관계는 양방향이므로 트리거로 자동 생성
CREATE OR REPLACE FUNCTION create_mutual_friendship()
RETURNS TRIGGER AS $
BEGIN
    IF NEW.status = 'accepted' THEN
        INSERT INTO friendships (user_id, friend_id, status, created_at, updated_at)
        VALUES (NEW.friend_id, NEW.user_id, 'accepted', NOW(), NOW())
        ON CONFLICT (user_id, friend_id) DO UPDATE SET
            status = 'accepted',
            updated_at = NOW();
    END IF;
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_mutual_friendship
    AFTER INSERT OR UPDATE ON friendships
    FOR EACH ROW
    EXECUTE FUNCTION create_mutual_friendship();

-- 샘플 데이터 (테스트용)
INSERT INTO users (username, email, password_hash) VALUES
('user1', 'user1@example.com', '$2a$10$sample_hash_1'),
('user2', 'user2@example.com', '$2a$10$sample_hash_2'),
('user3', 'user3@example.com', '$2a$10$sample_hash_3');

---

# healthcheck.js
const http = require('http');

const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/health',
  method: 'GET',
  timeout: 3000
};

const req = http.request(options, (res) => {
  if (res.statusCode === 200) {
    process.exit(0);
  } else {
    process.exit(1);
  }
});

req.on('error', () => {
  process.exit(1);
});

req.on('timeout', () => {
  req.destroy();
  process.exit(1);
});

req.end();